name: Django CI

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Add Secretes
      run: |
        echo DB_NAME=${{ secrets.DB_NAME }} >> ./eng_gls_backend/.env
        echo DB_USER=${{ secrets.DB_USER }} >> ./eng_gls_backend/.env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> ./eng_gls_backend/.env
        echo HOST=${{ secrets.HOST }} >> ./eng_gls_backend/.env
        echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> ./eng_gls_backend/.env

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./eng_gls_backend/requirements.txt
    - name: Run migrations
      run: |
        cd eng_gls_backend/
        python manage.py migrate

    - name: Run Tests
      run: |
        cd eng_gls_backend/
        python manage.py test

    - name: Log in to GitHub Containers
      if: success()
      run: echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ secrets.OWNER_NAME }} --password-stdin
    - name: Build Images
      run: |
        docker build ./eng_gls_backend/. -t ${{ secrets.TAG_BACKEND }}
        docker build ./eng_gls_frontend/. -t ${{ secrets.TAG_FRONTEND }}

    - name: Push Images
      run: |
        docker push ${{ secrets.TAG_BACKEND }}
        docker push ${{ secrets.TAG_FRONTEND }}

    - name: Add the private SSH key to the ssh-agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

    - name: Deploy images on DigitalOcean
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
          cd app
          ./docker_rebuild.sh
        ENDSSH

